// Code generated by protoc-gen-go. DO NOT EDIT.
// source: time.proto

package time

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Time struct {
	Now                  string   `protobuf:"bytes,1,opt,name=now,proto3" json:"now,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Time) Reset()         { *m = Time{} }
func (m *Time) String() string { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()    {}
func (*Time) Descriptor() ([]byte, []int) {
	return fileDescriptor_49a92d779a28c7fd, []int{0}
}

func (m *Time) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Time.Unmarshal(m, b)
}
func (m *Time) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Time.Marshal(b, m, deterministic)
}
func (m *Time) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Time.Merge(m, src)
}
func (m *Time) XXX_Size() int {
	return xxx_messageInfo_Time.Size(m)
}
func (m *Time) XXX_DiscardUnknown() {
	xxx_messageInfo_Time.DiscardUnknown(m)
}

var xxx_messageInfo_Time proto.InternalMessageInfo

func (m *Time) GetNow() string {
	if m != nil {
		return m.Now
	}
	return ""
}

func init() {
	proto.RegisterType((*Time)(nil), "time.Time")
}

func init() { proto.RegisterFile("time.proto", fileDescriptor_49a92d779a28c7fd) }

var fileDescriptor_49a92d779a28c7fd = []byte{
	// 127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xc9, 0xcc, 0x4d,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0xa5, 0xa4, 0xd3, 0xf3, 0xf3, 0xd3,
	0x73, 0x52, 0xf5, 0xc1, 0x62, 0x49, 0xa5, 0x69, 0xfa, 0xa9, 0xb9, 0x05, 0x25, 0x95, 0x10, 0x25,
	0x4a, 0x12, 0x5c, 0x2c, 0x21, 0x99, 0xb9, 0xa9, 0x42, 0x02, 0x5c, 0xcc, 0x79, 0xf9, 0xe5, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x20, 0xa6, 0x91, 0x05, 0x17, 0x3b, 0x48, 0xc6, 0x2f, 0xbf,
	0x5c, 0x48, 0x97, 0x8b, 0xdd, 0x3d, 0xb5, 0x04, 0xac, 0x4e, 0x4c, 0x0f, 0x62, 0x9a, 0x1e, 0xcc,
	0x34, 0x3d, 0x57, 0x90, 0x69, 0x52, 0x5c, 0x7a, 0x60, 0x7b, 0x41, 0x6a, 0x92, 0xd8, 0xc0, 0x72,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x12, 0xa8, 0x19, 0xdf, 0x8b, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TimeNowClient is the client API for TimeNow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TimeNowClient interface {
	GetTime(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Time, error)
}

type timeNowClient struct {
	cc *grpc.ClientConn
}

func NewTimeNowClient(cc *grpc.ClientConn) TimeNowClient {
	return &timeNowClient{cc}
}

func (c *timeNowClient) GetTime(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Time, error) {
	out := new(Time)
	err := c.cc.Invoke(ctx, "/time.TimeNow/GetTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeNowServer is the server API for TimeNow service.
type TimeNowServer interface {
	GetTime(context.Context, *empty.Empty) (*Time, error)
}

func RegisterTimeNowServer(s *grpc.Server, srv TimeNowServer) {
	s.RegisterService(&_TimeNow_serviceDesc, srv)
}

func _TimeNow_GetTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeNowServer).GetTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/time.TimeNow/GetTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeNowServer).GetTime(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimeNow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "time.TimeNow",
	HandlerType: (*TimeNowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTime",
			Handler:    _TimeNow_GetTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "time.proto",
}
